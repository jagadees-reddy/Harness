####################
# CircleCI configuration reference:
#   https://circleci.com/docs/2.0/configuration-reference
####################

version: 2.1

jobs:
  build:
    docker:
      - image: docker:stable-git
    working_directory: /dockerflow
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Create a version.json
          command: |
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json
      - run:
          name: Build Docker image
          command: docker build -t app:build .

      - run:
          name: Save Docker image to cache
          command: mkdir -p /cache; docker save -o /cache/docker.tar "app:build"
      - save_cache:
          key: v1-{{ .Branch }}-{{epoch}}
          paths:
            - /cache/docker.tar

  test:
    docker:
      - image: docker:18.02.0-ce
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v1-{{.Branch}}
      - run:
          name: Restore Docker image cache
          command: docker load -i /cache/docker.tar
      - run:
          name: Test Code
          command: docker run app:build pytest tests/
      - run:
          name: Lint Code
          command: docker run app:build flake8 python_application

  deploy:
    docker:
      - image: docker:18.02.0-ce
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v1-{{.Branch}}
      - run:
          name: Restore Docker image cache
          command: docker load -i /cache/docker.tar
      - run:
          name: Deploy to Dockerhub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker tag app:build ${DOCKERHUB_REPO}:latest
              docker push ${DOCKERHUB_REPO}:latest
            elif [ ! -z "${CIRCLE_TAG}" ]; then
              docker tag app:build "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            fi

workflows:
  version: 2
  commit:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/

      - test:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - deploy:
          requires:
            - build
            - test
          filters:
            tags:
              only: /.*/
            branches:
              only: master
